import java.util.*;

public class Sort {
  
  public static void selectionSort(double[] a) {
    int n = a.length;
    
    while (n > 1) {
      int max = 0;
      for (int k = 1; k < n; k++) {
        if (a[k] > a[max]) max = k;
      }
      double tmp = a[max];
      a[max] = a[n-1];
      a[n-1] = tmp;
      n--;
    }
  }
  
  public static void insertionSort(double[] a) {
    int n = a.length;
    for (int k = 1; k < n; k++) {
      double tmp = a[k];
      int i = k;
      while (i > 0 && a[i-1] > tmp) {
        a[i] = a[i-1];
        i--;
      }
      a[i] = tmp;
    }
    
    SortDisplay.update();
  }

  public static void mergeSort(double[] a) {
    double[] tmp = new double[a.length];
    mergeSort(a, tmp, 0, a.length - 1);
  }
  
  public static void mergeSort(double[] a, double[] tmp, int left, int right) {
    if (left < right) {
      int mid = (left + right) / 2;
      mergeSort(a, tmp, left, mid);
      mergeSort(a, tmp, mid + 1, right);
      merge(a, tmp, left, mid + 1, right);
    }
  }
  
  public static void merge(double[] a, double[] tmp, int left, int right, int rightEnd) {
    int leftEnd = right - 1;
    int k = left;
    int num = rightEnd - left + 1;
    
    while (left <= leftEnd && right <= rightEnd) {
      if (a[left] < a[right]) {
        tmp[k++] = a[left++];
      } else {
        tmp[k++] = a[right++];
      }
    }
    
    while (left <= leftEnd) {
      tmp[k++] = a[left++];
    }
    
    while (right <= rightEnd) {
      tmp[k++] = a[right++];
    }
    
    for (int i = 0; i < num; i++, rightEnd--) {
      a[rightEnd] = tmp[rightEnd];
    }
  }
  
  public static void quickSort(double[] a) {
    quickSort(a, 0, a.length - 1);
  }
  
  public static void quickSort(double[] a, int low, int high) {
    int i = low, j = high;
    double pivot = a[low + (high - low) / 2];
    
    while (i <= j) {
      while (a[i] < pivot) i++;
      while (a[j] > pivot) j--;
      if (i <= j) {
        double tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
        i++;
        j--;
      }
    }
    
    if (low < j) quickSort(a, low, j);
    if (high > i) quickSort(a, i, high);
  }
}
