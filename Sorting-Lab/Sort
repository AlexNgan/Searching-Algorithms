import java.util.*;

public class Sort
{
  //precondition:  a is arranged in alphabetical order
  //postcondition: uses binary search to return the index of string s in a;
  //               returns -1 if not found 
  public static int indexOf(String[] a, String s)
  {
    int mid = a.length / 2;    //Index of middle element in the array.
    
    while(mid >= 0 && mid < a.length){
      if(a[mid].equals(s))     //If the middle element is the target.
        return mid;
      else if(a[mid].compareTo(s) > 0)     //If target is less than the middle element.
        mid = mid / 2;
      else if(a[mid].compareTo(s) < 0)     //If the target is greater than the middle element.
        mid += ((a.length - 1) / 2);
      return 0;
    }
    return -1;
  }
  
  //This method tests the indexOf code.
  public static void testIndexOf(){
    String[] words = {
      "case", "child", "day", "eye", "government",
      "hand", "life", "man", "part", "person",
      "place", "point", "thing", "time", "way",
      "week", "woman", "work", "world", "year"};
    
    ArrayList<String> list = new ArrayList<String>();
    for (int i = 0; i < words.length; i++)
      list.add(words[i]);
    String[] a = new String[(int)(Math.random() * 11 + 5)];
    
    while (list.size() > a.length)
      list.remove((int)(Math.random() * list.size()));
    
    for (int i = 0; i < a.length; i++)
      a[i] = list.get(i);
    System.out.println("a:  " + list);
    
    for (int i = 0; i < words.length; i++)
    {
      System.out.print("Searching for:  " + words[i]);
      int index = indexOf(a, words[i]);
      System.out.println("\t\tindexOf returned:  " + index);
      int correctIndex = list.indexOf(words[i]);
      if (index != correctIndex)
        throw new RuntimeException("Should have returned:  " + correctIndex);
    }
    System.out.print("Searching for:  boy");
    int index = indexOf(a, "boy");
    System.out.println("\t\tindexOf returned:  " + index);
    
    if (index != -1)
      throw new RuntimeException("Should have returned:  -1");
    System.out.print("Searching for:  you");
    index = indexOf(a, "you");
    System.out.println("\t\tindexOf returned:  " + index);
    
    if (index != -1)
      throw new RuntimeException("Should have returned:  -1");
  }
  
  //precondition:  0 <= startIndex < a.length
  //postcondition: Returns the index of the minimum value from
  //               a[startIndex] to end of array
  public static int indexOfMin(double[] a, int startIndex)
  {
    return 0;
  }
  
  public static void selectionSort(double[] a){
    //TODO
  }
  
  /*
   * @params: array of doubles to sort and int
   * location of next element to sort
   */ 
  public static void insertionSort(double[] arr){
    for (int k = 1 ; k < arr.length; k++){
      double temp = arr[k];
      int i = k;
      while (i > 0 && arr [i-1] > temp){
        arr[i] = arr[i-1];
        i--;
      }
      arr [i] = temp;
    }
  }

public static void mergeSort(double[] a)
{
}
}
